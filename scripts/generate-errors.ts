import { readFile, writeFile } from 'node:fs/promises'
import { resolve } from 'node:path'
import { Parser } from 'parse5'
import { formatOutput } from './utils.ts'

interface ProtocolError {
  id: string
  code: number
  canRetry: boolean
  message: string
}

async function loadErrors (root: string): Promise<ProtocolError[]> {
  // Open the main protocol.html file to the folder used
  const protocolIndex = await readFile(resolve(root, 'protocol.html'), 'utf-8')

  const [, folder] = protocolIndex.match(/#include virtual="(.+?)\/protocol.html"/)!

  // Now open the actual protocol.html file
  const errorsDefinitions = await readFile(resolve(root, folder, 'generated/protocol_errors.html'), 'utf-8')

  const contents = Parser.parse(errorsDefinitions)!
  // html -> body -> table -> tbody

  return (
    // @ts-ignore - Wrong parse5 types
    contents.childNodes[0].childNodes[1].childNodes[0].childNodes[0].childNodes
      // @ts-ignore - Wrong parse5 types
      .filter(n => n.nodeName === 'tr')
      .slice(1) // Discard the header row
      // @ts-ignore - Wrong parse5 types
      .map(row => {
        return {
          id: row.childNodes[0].childNodes[0].value,
          code: parseInt(row.childNodes[1].childNodes[0].value),
          canRetry: row.childNodes[2].childNodes[0].value === 'True',
          message: row.childNodes[3].childNodes[0]?.value ?? ''
        }
      })
  )
}

async function main () {
  // Load Kafka API names and IDs
  const kafkaSource = process.argv[2]

  if (!kafkaSource) {
    console.error('Please provide the path to the Kafka Website source code')
    process.exit(1)
  }

  const errors = await loadErrors(resolve(process.cwd(), kafkaSource))

  const output = `
  // This is autogenerated from the generate:errors script, do not edit manually.
  
  export interface ProtocolError {
    id: string
    code: number
    canRetry: boolean
    message: string
  }

  export const protocolErrorsCodesById: Record<number, string> = ${JSON.stringify(
    Object.fromEntries(errors.map(e => [e.code, e.id])),
    null,
    2
  )}
  
  export const protocolErrors: Record<string, ProtocolError> = ${JSON.stringify(
    Object.fromEntries(errors.map(e => [e.id, e])),
    null,
    2
  )}
  `

  const destination = resolve(import.meta.dirname, '../src/protocol/errors.ts')
  await writeFile(destination, await formatOutput(output, destination), 'utf-8')
}

await main()
