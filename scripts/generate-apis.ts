import JSON5 from 'json5'
import { glob, readFile, writeFile } from 'node:fs/promises'
import { basename, resolve } from 'node:path'
import { formatOutput } from './utils.ts'

async function loadAPIs (root: string): Promise<[Record<string, number>, Record<number, string>]> {
  const apiByName: Record<string, number> = {}
  const apiById: Record<number, string> = {}

  for await (const file of glob(resolve(root, 'clients/src/main/resources/common/message/*Request.json'))) {
    const spec = JSON5.parse(await readFile(file, 'utf-8'))
    const key = spec.apiKey as number
    const name = basename(file, 'Request.json')

    apiByName[name] = key
    apiById[key] = name
  }

  return [apiByName, apiById]
}

async function main () {
  // Load Kafka API names and IDs
  const kafkaSource = process.argv[2]

  if (!kafkaSource) {
    console.error('Please provide the path to the Kafka source code')
    process.exit(1)
  }

  const [apiByName, apiById] = await loadAPIs(resolve(process.cwd(), kafkaSource))

  const output = `
  // This is autogenerated from the generate:apis script, do not edit manually.
  
  export const protocolAPIsByName: Record<string, number> = Object.freeze(${JSON.stringify(apiByName, null, 2)})
        
  export const protocolAPIsById: Record<number, string> = Object.freeze(${JSON.stringify(apiById, null, 2)})
  `

  const destination = resolve(import.meta.dirname, '../src/protocol/apis.ts')
  await writeFile(destination, await formatOutput(output, destination), 'utf-8')
}

await main()
